buildscript {

    ext {
        // Airship Version - major.minor.patch
        airshipVersion = '14.5.0'

        // Airship Version Qualifier beta, release, etc...
        // airshipVersionQualifier = "beta"

        // Android SDK Versions
        compileSdkVersion = 29
        targetSdkVersion = 29
        minSdkVersion = 21

        // Gradle plugins
        gradlePluginVersion = '4.1.3'
        bintrayPluginVersion = '1.8.4'
        googleServicesPluginVersion = '4.3.3'
        spotlessPluginVersion = '3.27.1'
        ktlintPluginVersion = '0.36.0'

        // Dependencies

        // Kotlin
        kotlinVersion = '1.4.32'
        kotlinCoroutinesVersion = '1.4.3'
        kotlinSerializationVersion = '1.1.0'

        // Androidx
        androidxCoreVersion = '1.3.2'
        androidxFragmentVersion = '1.2.5'
        androidxAnnotationVersion = '1.1.0'
        androidxCustomViewVersion = '1.1.0'
        androidxAppCompatVersion = '1.2.0'
        androidxPreferenceVersion = '1.1.1'
        androidxVectorDrawableVersion = '1.1.0'
        androidxRoomVersion = '2.2.6'
        androidxConstraintLayoutVersion = '2.0.4'
        androidxPagingVersion = '2.1.2'
        androidxLifeCycleVersion = '2.3.0'
        androidxNavigationVersion = '2.3.3'
        androidxSwipeRefreshLayoutVersion = '1.1.0'
        androidXWork = '2.5.0'
        androidXConcurrentFutures = '1.1.0'

        // Material design
        materialVersion = '1.3.0'

        // Google Play Services
        playServicesAdsIdentifierVersion = '17.0.0'
        playServicesLocationVersion = '17.1.0'
        playServicesBaseVersion = '17.6.0'

        // Firebase
        firebaseFcmVersion = '21.0.1'

        // OkHttp (for WebSocket support in airship-chat)
        okHttpVersion = '4.9.0'

        // Test
        androidxTestTruthVersion = '1.2.0'
        androidxTestRunnerVersion = '1.2.0'
        androidxTestRulesVersion = '1.2.0'
        androidxTestCoreVersion = '1.3.0'
        androidxTestJunitVersion = '1.1.2'
        androidxEspressoVersion = '3.2.0'
        kotlinxCorutinesTest = '1.4.3'
        googleTruthVersion = '1.0.1'
        junitVersion = '4.13.2'
        mockitoVersion = '3.9.0'
        mockitoKotlinVersion = '3.1.0'
        robolectricVersion = '4.3.1'

        // Doc Dependencies
        doclavaVersion = '1.0.6'
    }

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$gradlePluginVersion"
        classpath "com.google.gms:google-services:$googleServicesPluginVersion"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:$spotlessPluginVersion"
        classpath "com.pinterest:ktlint:$ktlintPluginVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    id('airship-publish')
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

configurations {
    doclava
}

dependencies {
    // Docs
    doclava("com.google.doclava:doclava:$rootProject.doclavaVersion")
}

task javadoc(type: Javadoc) {
    destinationDir = file("$buildDir/docs/javadoc")
    title = null
    failOnError false

    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/com/ad4screen/**'

    options {
        docletpath = configurations.doclava.files as List
        doclet "com.google.doclava.Doclava"
        bootClasspath new File(System.getenv('JAVA_HOME') + "/jre/lib/rt.jar")
        addStringOption "notimestamp", null
        addStringOption "hdf project.name", "Airship Android SDK"
        addStringOption "hdf project.version", project.version
        addStringOption "apiversion", "v2"
        addStringOption "federate android", "http://developer.android.com/reference"
        addStringOption "federationxml android", "docs/android-22.xml"
        addStringOption "templatedir", "docs/template"
    }

    subprojects.findAll { it.name.startsWith("urbanairship-") && !it.name.contains("stub") && !it.name.contains("test")}.each { proj ->
        proj.afterEvaluate { evaluated ->
            source += evaluated.android.sourceSets.main.java.sourceFiles
            if (proj.name.equals("urbanairship-core") ||
                proj.name.equals("urbanairship-accengage") ||
                proj.name.equals("urbanairship-ads-identifier") ||
                proj.name.equals("urbanairship-automation") ||
                proj.name.equals("urbanairship-location") ||
                proj.name.equals("urbanairship-message-center") ||
                proj.name.equals("urbanairship-preference") ||
                proj.name.equals("urbanairship-chat")) {
                classpath += evaluated.files(evaluated.android.getBootClasspath().join(File.pathSeparator))

                evaluated.android.libraryVariants.all { variant ->
                    if (variant.name == 'release') {
                        classpath += variant.getJavaCompileProvider().get().classpath
                        classpath += project.files(evaluated.android.getBootClasspath().join(File.pathSeparator))
                    }
                }
            }
        }
    }
}

task packageDocs(type: Tar, dependsOn: 'javadoc') {
    into('./') {
        from 'build/docs/javadoc'
    }

    archiveFileName = "${rootProject.airshipVersion}.tar.gz"
    compression = Compression.GZIP

    destinationDirectory.set(file('build/docs'))
    archiveExtension.set('tar.gz')
    compression = Compression.GZIP
}

task getVersion() {
    doLast {
        def version = airshipVersion
        if (project.hasProperty("airshipVersionQualifier")) {
            version += "-" + airshipVersionQualifier
        }
        println version
    }
}

apply plugin: "com.diffplug.gradle.spotless"

spotless {
    java {
        target '**/*.java'
        targetExclude '.idea/**'

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    kotlin {
        target '**/*.kt'
        targetExclude '.idea/**'

        ktlint().userData(['max_line_length': 'off'])

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
}
