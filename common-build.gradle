version = getMavenVersion()
group = "com.urbanairship.android"

apply plugin: 'com.android.library'

// For test coverage reports
apply plugin: 'jacoco'

android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        buildConfigField "String", "AIRSHIP_VERSION", "\"${getMavenVersion()}\""
        buildConfigField "String", "SDK_VERSION", "\"${getSdkVersionString()}\""

        consumerProguardFiles 'proguard-rules.pro'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        checkOnly 'Interoperability'
    }

    testOptions.unitTests.includeAndroidResources = true
}

def getSdkVersionString() {
    def result = "!SDK-VERSION-STRING!:" + project.group + ":" + project.name + ":"
    if (rootProject.hasProperty('airshipVersionQualifier')) {
        result += rootProject.airshipVersionQualifier + ":"
    }
    result += rootProject.airshipVersion
    return result
}

def getMavenVersion() {
    def result = rootProject.airshipVersion
    if (project.hasProperty("airshipVersionQualifier")) {
        result += "-" + airshipVersionQualifier
    }

    if (project.hasProperty('versionSuffix')) {
        result += "-" + property('versionSuffix')
    }

    return result
}

def getDexMethodCount() {
    try {
        def dx = "${android.getSdkDirectory()}/build-tools/${android.getBuildToolsRevision()}/dx"
        def jar = "${project.buildDir}/intermediates/bundles/release/classes.jar"
        def output = new ByteArrayOutputStream()
        exec {
            commandLine "../tools/dex-method-count.sh", dx, jar
            standardOutput = output
        }
        return output.toString().trim()
    } catch (e) {
        println(e)
        return ""
    }
}

task runDexMethodCount {
    doLast {
        def count = getDexMethodCount()

        File dex = file("${project.buildDir}/dex-counts/release")
        dex.getParentFile().mkdirs()
        dex.text = "Dex Method Count: ${count}"
        println("Dex Method Count: ${count}")
    }
}

project.afterEvaluate {
    runDexMethodCount.dependsOn(assembleRelease)
}
