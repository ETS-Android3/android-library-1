version = getMavenVersion()
group = "com.urbanairship.android"

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

// For test coverage reports
apply plugin: 'jacoco'

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        buildConfigField "String", "AIRSHIP_VERSION", "\"${getMavenVersion()}\""
        buildConfigField "String", "SDK_VERSION", "\"${getSdkVersionString()}\""

        consumerProguardFiles 'proguard-rules.pro'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        checkOnly 'Interoperability'
    }

    testOptions.unitTests.includeAndroidResources = true
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    developers {
        developer {
            name 'Airship'
        }
    }

    scm {
        connection 'https://github.com/urbanairship/android-library.git'
        url 'https://github.com/urbanairship/android-library'
    }
}


publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/" + project.name + "-release.aar")
            artifact(sourceJar)
            groupId project.group
            artifactId project.name

            pom.withXml {
                def root = asNode()

                def dependenciesNode = root.appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }

                root.appendNode('description', project.description)
                root.appendNode('name', project.name)
                root.appendNode('url', 'https://github.com/urbanairship/android-library')
                root.children().last() + pomConfig
            }
        }
    }
}

task bintrayUploadInternal {
    doFirst {
        bintrayUpload.repoName = 'android-internal'
        bintrayUpload.publish = true
        bintrayUpload.syncToMavenCentral = false
    }
    finalizedBy 'bintrayUpload'
}

bintray {
    user = "$System.env.BINTRAY_USER"
    key = "$System.env.BINTRAY_API_KEY"

    if (project.hasProperty('bintrayUser') && project.hasProperty('bintrayApiKey')) {
        // Credentials should be stored in ~/.gradle/gradle.properties
        user = bintrayUser
        key = bintrayApiKey
    }

    publications = ['Production']

    pkg {
        repo = 'android'
        userOrg = 'urbanairship'
        name = project.name
        desc = project.description
        websiteUrl = 'https://github.com/urbanairship/android-library'
        licenses = ['Apache-2.0']
        publish = true
        vcsUrl = 'https://github.com/urbanairship/android-library.git'
        version {
            desc = project.description
            name = project.version
            released = new Date()
        }
    }
}

def getSdkVersionString() {
    def result = "!SDK-VERSION-STRING!:" + project.group + ":" + project.name + ":"
    if (rootProject.hasProperty('airshipVersionQualifier')) {
        result += rootProject.airshipVersionQualifier + ":"
    }
    result += rootProject.airshipVersion
    return result
}

def getMavenVersion() {
    def result = rootProject.airshipVersion
    if (project.hasProperty("airshipVersionQualifier")) {
        result += "-" + airshipVersionQualifier
    }

    if (project.hasProperty('versionSuffix')) {
        result += "-" + property('versionSuffix')
    }

    return result
}

def getDexMethodCount() {
    try {
        def dx = "${android.getSdkDirectory()}/build-tools/${android.getBuildToolsRevision()}/dx"
        def jar = "${project.buildDir}/intermediates/bundles/release/classes.jar"
        def output = new ByteArrayOutputStream()
        exec {
            commandLine "../tools/dex-method-count.sh", dx, jar
            standardOutput = output
        }
        return output.toString().trim()
    } catch (e) {
        println(e)
        return ""
    }
}

task runDexMethodCount {
    doLast {
        def count = getDexMethodCount()

        File dex = file("${project.buildDir}/dex-counts/release")
        dex.getParentFile().mkdirs()
        dex.text = "Dex Method Count: ${count}"
        println("Dex Method Count: ${count}")
    }
}

boolean verifyArtifactAvailableOnMavenCentral(packageName, version) {
    // maven central search API
    StringBuilder url = new StringBuilder("https://search.maven.org/solrsearch/select")
    url.append("?q=")
    url.append("g:").append(URLEncoder.encode("\"${group}\"", "UTF-8"))
    url.append("+AND+")
    url.append("a:").append(URLEncoder.encode("\"${packageName}\"", "UTF-8"))
    url.append("+AND+")
    url.append("v:").append(URLEncoder.encode("\"${version}\"", "UTF-8"))

    def connection = new URL(url.toString()).openConnection()
    connection.setRequestProperty("Accept", "application/json");

    def responseCode = connection.responseCode
    if (responseCode != 200) {
        return false
    }

    try {
        InputStream httpResponse = connection.getInputStream()
        def responseObject = new JsonSlurper().parseText(httpResponse.text)
        if (!responseObject) {
            return false
        }
        def response = responseObject.response
        if (!response) {
            return false
        }
        def numFound = response.numFound
        if (!numFound || (numFound == 0)) {
            return false
        }
    } catch (Throwable e) {
        println("Exception while using Maven Central API (${connection.getURL()}): ${e}")
        return false
    }

    return true
}

boolean verifyArtifactAvailableOnBintray(userOrg, repo, packageName, version, user, key) {
    // Bintray packages API
    def url = "https://api.bintray.com/packages/${userOrg}/${repo}/${packageName}/versions/${version}"
    def connection = new URL(url).openConnection()
    connection.setRequestProperty("Accept", "application/json");

    String auth = user + ":" + key
    byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes())
    String authHeaderValue = "Basic " + new String(encodedAuth)
    connection.setRequestProperty("Authorization", authHeaderValue)

    def responseCode = connection.responseCode

    if (responseCode != 200) {
        return false
    }

    try {
        InputStream response = connection.getInputStream()
    } catch(Throwable e) {
        println("Exception while using Bintray API (${connection.getURL()}): ${e}")
        return false
    }

    return true
}

boolean syncFromBintrayToMavenCentral() {
    def mavenCentralUserToken = "$System.env.MAVEN_USER"
    def mavenCentralPasswordToken = "$System.env.MAVEN_PASSWORD"
    def packageName = project.name
    def version = project.version

    if (project.hasProperty('mavenUser') && project.hasProperty('mavenPassword')) {
        // Credentials should be stored in ~/.gradle/gradle.properties
        mavenCentralUserToken = mavenUser
        mavenCentralPasswordToken = mavenPassword
    }

    if (mavenCentralUserToken == null || mavenCentralUserToken.isEmpty()) {
        throw new GradleException("No maven-central user token is set. Either set MAVEN_USER in your environment or mavenUser in gradle.properties")
    }

    if (mavenCentralPasswordToken == null || mavenCentralPasswordToken.isEmpty()) {
        throw new GradleException("No maven-central password token is set. Either set MAVEN_PASSWORD in your environment or mavenPassword in gradle.properties")
    }

    def user = "$System.env.BINTRAY_USER"
    def key = "$System.env.BINTRAY_API_KEY"

    if (project.hasProperty('bintrayUser') && project.hasProperty('bintrayApiKey')) {
        // Credentials should be stored in ~/.gradle/gradle.properties
        user = bintrayUser
        key = bintrayApiKey
    }

    if (user == null || user.isEmpty()) {
        throw new GradleException("No Bintray user is set. Either set BINTRAY_USER in your environment or bintrayUser in gradle.properties")
    }

    if (key == null || key.isEmpty()) {
        throw new GradleException("No Bintray API token is set. Either set BINTRAY_API_KEY in your environment or bintrayApiKey in gradle.properties")
    }

    // Bintray maven central sync API
    def url = "https://api.bintray.com/maven_central_sync/urbanairship/android/${packageName}/versions/${version}"
    def connection = new URL(url).openConnection()
    connection.setDoInput(true)
    connection.setDoOutput(true)
    connection.setRequestMethod('POST')
    connection.setRequestProperty("Content-Type", "application/json");
    connection.setRequestProperty("Accept", "application/json");

    String auth = user + ":" + key
    byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes())
    String authHeaderValue = "Basic " + new String(encodedAuth)
    connection.setRequestProperty("Authorization", authHeaderValue)

    def parameters = new JsonOutput().toJson([username: mavenCentralUserToken, password: mavenCentralPasswordToken])
    OutputStreamWriter writer = new OutputStreamWriter(
            connection.getOutputStream())
    writer.write(parameters)
    writer.flush()

    try {
        def responseCode = connection.responseCode

        // Success: 200
        // Package doesn't exist: 404
        // Version doesn't exist: 404
        // Intermittent failure?: 400
    
        if (responseCode != 200) {
            println("Bintray response = ${responseCode}")
            return false
        }
        InputStream response = connection.getInputStream()
        response.readLines().forEach { line ->
            println(line)
        }
    } catch (Throwable e) {
        println("Exception while using Bintray API (${connection.getURL()}): ${e}")
        return false
    }

    return true
}

task syncToMavenCentral {
    doLast {
        def retries = 3
        def millisecondsToWaitForRetry = 2000

        def synced = false

        for (int i = 0; i < retries; i++) {
            synced = syncFromBintrayToMavenCentral()
            if (synced) {
                println("Package synced to maven central.")
                break
            } else {
                println("Unable to sync to maven central.")
                if (i < retries - 1) {
                    sleep(millisecondsToWaitForRetry)
                }
            }
        }

        if (!synced) {
            throw new GradleException("Unable to sync to maven central")
        }
    }
}

project.afterEvaluate {
    runDexMethodCount.dependsOn(assembleRelease)
    bintrayUpload.dependsOn(assembleRelease)
}
